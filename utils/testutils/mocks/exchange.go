// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import amp_matching_enginetypes "github.com/Proofsuite/amp-matching-engine/types"
import bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
import common "github.com/ethereum/go-ethereum/common"
import contractsinterfaces "github.com/Proofsuite/amp-matching-engine/contracts/contractsinterfaces"

import mock "github.com/stretchr/testify/mock"
import types "github.com/ethereum/go-ethereum/core/types"

// Exchange is an autogenerated mock type for the Exchange type
type Exchange struct {
	mock.Mock
}

// FeeAccount provides a mock function with given fields:
func (_m *Exchange) FeeAccount() (common.Address, error) {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetErrorEvents provides a mock function with given fields: logs
func (_m *Exchange) GetErrorEvents(logs chan *contractsinterfaces.ExchangeLogError) error {
	ret := _m.Called(logs)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan *contractsinterfaces.ExchangeLogError) error); ok {
		r0 = rf(logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTrades provides a mock function with given fields: logs
func (_m *Exchange) GetTrades(logs chan *contractsinterfaces.ExchangeLogTrade) error {
	ret := _m.Called(logs)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan *contractsinterfaces.ExchangeLogTrade) error); ok {
		r0 = rf(logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTxCallOptions provides a mock function with given fields:
func (_m *Exchange) GetTxCallOptions() *bind.CallOpts {
	ret := _m.Called()

	var r0 *bind.CallOpts
	if rf, ok := ret.Get(0).(func() *bind.CallOpts); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.CallOpts)
		}
	}

	return r0
}

// ListenToErrors provides a mock function with given fields:
func (_m *Exchange) ListenToErrors() (chan *contractsinterfaces.ExchangeLogError, error) {
	ret := _m.Called()

	var r0 chan *contractsinterfaces.ExchangeLogError
	if rf, ok := ret.Get(0).(func() chan *contractsinterfaces.ExchangeLogError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *contractsinterfaces.ExchangeLogError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListenToTrades provides a mock function with given fields:
func (_m *Exchange) ListenToTrades() (chan *contractsinterfaces.ExchangeLogTrade, error) {
	ret := _m.Called()

	var r0 chan *contractsinterfaces.ExchangeLogTrade
	if rf, ok := ret.Get(0).(func() chan *contractsinterfaces.ExchangeLogTrade); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *contractsinterfaces.ExchangeLogTrade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Operator provides a mock function with given fields: a
func (_m *Exchange) Operator(a common.Address) (bool, error) {
	ret := _m.Called(a)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrintErrors provides a mock function with given fields:
func (_m *Exchange) PrintErrors() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrintTrades provides a mock function with given fields:
func (_m *Exchange) PrintTrades() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFeeAccount provides a mock function with given fields: a, txOpts
func (_m *Exchange) SetFeeAccount(a common.Address, txOpts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(a, txOpts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(common.Address, *bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(a, txOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, *bind.TransactOpts) error); ok {
		r1 = rf(a, txOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOperator provides a mock function with given fields: a, isOperator, txOpts
func (_m *Exchange) SetOperator(a common.Address, isOperator bool, txOpts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(a, isOperator, txOpts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(common.Address, bool, *bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(a, isOperator, txOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, bool, *bind.TransactOpts) error); ok {
		r1 = rf(a, isOperator, txOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Trade provides a mock function with given fields: o, t, txOpts
func (_m *Exchange) Trade(o *amp_matching_enginetypes.Order, t *amp_matching_enginetypes.Trade, txOpts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(o, t, txOpts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*amp_matching_enginetypes.Order, *amp_matching_enginetypes.Trade, *bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(o, t, txOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*amp_matching_enginetypes.Order, *amp_matching_enginetypes.Trade, *bind.TransactOpts) error); ok {
		r1 = rf(o, t, txOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
