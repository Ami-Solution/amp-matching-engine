// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
import common "github.com/ethereum/go-ethereum/common"

import coretypes "github.com/ethereum/go-ethereum/core/types"
import interfaces "github.com/Proofsuite/amp-matching-engine/contracts/contractsinterfaces"
import mock "github.com/stretchr/testify/mock"
import types "github.com/Proofsuite/amp-matching-engine/types"

// Exchange is an autogenerated mock type for the Exchange type
type Exchange struct {
	mock.Mock
}

// FeeAccount provides a mock function with given fields:
func (_m *Exchange) FeeAccount() (common.Address, error) {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomTxSendOptions provides a mock function with given fields: w
func (_m *Exchange) GetCustomTxSendOptions(w *types.Wallet) *bind.TransactOpts {
	ret := _m.Called(w)

	var r0 *bind.TransactOpts
	if rf, ok := ret.Get(0).(func(*types.Wallet) *bind.TransactOpts); ok {
		r0 = rf(w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.TransactOpts)
		}
	}

	return r0
}

// GetErrorEvents provides a mock function with given fields: logs
func (_m *Exchange) GetErrorEvents(logs chan *interfaces.ExchangeLogError) error {
	ret := _m.Called(logs)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan *interfaces.ExchangeLogError) error); ok {
		r0 = rf(logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTrades provides a mock function with given fields: logs
func (_m *Exchange) GetTrades(logs chan *interfaces.ExchangeLogTrade) error {
	ret := _m.Called(logs)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan *interfaces.ExchangeLogTrade) error); ok {
		r0 = rf(logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTxCallOptions provides a mock function with given fields:
func (_m *Exchange) GetTxCallOptions() *bind.CallOpts {
	ret := _m.Called()

	var r0 *bind.CallOpts
	if rf, ok := ret.Get(0).(func() *bind.CallOpts); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.CallOpts)
		}
	}

	return r0
}

// GetTxSendOptions provides a mock function with given fields:
func (_m *Exchange) GetTxSendOptions() (*bind.TransactOpts, error) {
	ret := _m.Called()

	var r0 *bind.TransactOpts
	if rf, ok := ret.Get(0).(func() *bind.TransactOpts); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.TransactOpts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListenToErrors provides a mock function with given fields:
func (_m *Exchange) ListenToErrors() (chan *interfaces.ExchangeLogError, error) {
	ret := _m.Called()

	var r0 chan *interfaces.ExchangeLogError
	if rf, ok := ret.Get(0).(func() chan *interfaces.ExchangeLogError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *interfaces.ExchangeLogError)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListenToTrades provides a mock function with given fields:
func (_m *Exchange) ListenToTrades() (chan *interfaces.ExchangeLogTrade, error) {
	ret := _m.Called()

	var r0 chan *interfaces.ExchangeLogTrade
	if rf, ok := ret.Get(0).(func() chan *interfaces.ExchangeLogTrade); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *interfaces.ExchangeLogTrade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Operator provides a mock function with given fields: a
func (_m *Exchange) Operator(a common.Address) (bool, error) {
	ret := _m.Called(a)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrintErrors provides a mock function with given fields:
func (_m *Exchange) PrintErrors() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrintTrades provides a mock function with given fields:
func (_m *Exchange) PrintTrades() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFeeAccount provides a mock function with given fields: a
func (_m *Exchange) SetFeeAccount(a common.Address) (*coretypes.Transaction, error) {
	ret := _m.Called(a)

	var r0 *coretypes.Transaction
	if rf, ok := ret.Get(0).(func(common.Address) *coretypes.Transaction); ok {
		r0 = rf(a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOperator provides a mock function with given fields: a, isOperator
func (_m *Exchange) SetOperator(a common.Address, isOperator bool) (*coretypes.Transaction, error) {
	ret := _m.Called(a, isOperator)

	var r0 *coretypes.Transaction
	if rf, ok := ret.Get(0).(func(common.Address, bool) *coretypes.Transaction); ok {
		r0 = rf(a, isOperator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, bool) error); ok {
		r1 = rf(a, isOperator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTxSender provides a mock function with given fields: w
func (_m *Exchange) SetTxSender(w *types.Wallet) {
	_m.Called(w)
}

// Trade provides a mock function with given fields: o, t
func (_m *Exchange) Trade(o *types.Order, t *types.Trade) (*coretypes.Transaction, error) {
	ret := _m.Called(o, t)

	var r0 *coretypes.Transaction
	if rf, ok := ret.Get(0).(func(*types.Order, *types.Trade) *coretypes.Transaction); ok {
		r0 = rf(o, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Order, *types.Trade) error); ok {
		r1 = rf(o, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
