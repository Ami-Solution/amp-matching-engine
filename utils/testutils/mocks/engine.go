// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import engine "github.com/Proofsuite/amp-matching-engine/engine"
import mock "github.com/stretchr/testify/mock"
import rabbitmq "github.com/Proofsuite/amp-matching-engine/rabbitmq"
import types "github.com/Proofsuite/amp-matching-engine/types"

// EngineResourceInterface is an autogenerated mock type for the EngineResourceInterface type
type EngineResourceInterface struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: order
func (_m *EngineResourceInterface) CancelOrder(order *types.Order) (*engine.Response, error) {
	ret := _m.Called(order)

	var r0 *engine.Response
	if rf, ok := ret.Get(0).(func(*types.Order) *engine.Response); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*engine.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleOrders provides a mock function with given fields: msg
func (_m *EngineResourceInterface) HandleOrders(msg *rabbitmq.Message) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rabbitmq.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecoverOrders provides a mock function with given fields: orders
func (_m *EngineResourceInterface) RecoverOrders(orders []*engine.FillOrder) error {
	ret := _m.Called(orders)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*engine.FillOrder) error); ok {
		r0 = rf(orders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeResponseQueue provides a mock function with given fields: fn
func (_m *EngineResourceInterface) SubscribeResponseQueue(fn func(*engine.Response) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*engine.Response) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
