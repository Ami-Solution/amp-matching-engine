// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import big "math/big"
import common "github.com/ethereum/go-ethereum/common"
import ethclient "github.com/ethereum/go-ethereum/ethclient"
import mock "github.com/stretchr/testify/mock"

import types "github.com/ethereum/go-ethereum/core/types"

// EthereumServiceInterface is an autogenerated mock type for the EthereumServiceInterface type
type EthereumServiceInterface struct {
	mock.Mock
}

// GetPendingBalanceAt provides a mock function with given fields: _a0
func (_m *EthereumServiceInterface) GetPendingBalanceAt(_a0 common.Address) (*big.Int, error) {
	ret := _m.Called(_a0)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address) *big.Int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitMined provides a mock function with given fields: _a0
func (_m *EthereumServiceInterface) WaitMined(_a0 *ethclient.Client) (*types.Receipt, error) {
	ret := _m.Called(_a0)

	var r0 *types.Receipt
	if rf, ok := ret.Get(0).(func(*ethclient.Client) *types.Receipt); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Receipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ethclient.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
